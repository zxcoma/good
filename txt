from flask import Flask, request, jsonify

app = Flask(__name__)

# Список для хранения задач (имитация базы данных)
tasks = []

# Функция для генерации ID задачи
def generate_task_id():
    return max([task['id'] for task in tasks], default=0) + 1

# Получение всех задач
@app.route('/tasks', methods=['GET'])
def get_tasks():
    return jsonify(tasks), 200

# Получение одной задачи по ID
@app.route('/tasks/<int:task_id>', methods=['GET'])
def get_task(task_id):
    task = next((task for task in tasks if task['id'] == task_id), None)
    if task is None:
        return jsonify({'error': 'Task not found'}), 404
    return jsonify(task), 200

# Создание новой задачи
@app.route('/tasks', methods=['POST'])
def create_task():
    data = request.get_json()
    if not data or 'title' not in data:
        return jsonify({'error': 'Invalid input'}), 400
    new_task = {
        'id': generate_task_id(),
        'title': data['title'],
        'completed': data.get('completed', False)
    }
    tasks.append(new_task)
    return jsonify(new_task), 201

# Обновление задачи по ID
@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    task = next((task for task in tasks if task['id'] == task_id), None)
    if task is None:
        return jsonify({'error': 'Task not found'}), 404
    data = request.get_json()
    if not data:
        return jsonify({'error': 'Invalid input'}), 400
    task['title'] = data.get('title', task['title'])
    task['completed'] = data.get('completed', task['completed'])
    return jsonify(task), 200

# Удаление задачи по ID
@app.route('/tasks/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    global tasks
    tasks = [task for task in tasks if task['id'] != task_id]
    return jsonify({'message': 'Task deleted'}), 200

if __name__ == '__main__':
    app.run(debug=True)
